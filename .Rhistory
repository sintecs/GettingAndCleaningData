for (i in 3:68)
{
colnames(tidy.full)[i] <- paste("Average by Subject and Activity ", colnames(tidy.full)[i])
}
?runif
runif(10)
library(datasets)
data("iris")
library(datasets)
data("iris")
?iris
data("iris")
data(iris)
View(iris)
split(iris, iris$Species == "virginica")
lapply(split(iris, iris$Species == "virginica"), mean, Sepal.length)
lapply(split(iris, iris$Species == "virginica"), mean, iris$Sepal.length)
lapply(split(iris, iris$Species == "virginica"), mean, iris$Sepal.length, rm.na = TRUE)
lapply(split(iris, iris$Species == "virginica"), mean, iris$Sepal.Length, rm.na = TRUE)
lapply(split(iris, iris$Species == "virginica"), function(x) colMeans(x, c("Sepal.Length"), rm.na = TRUE)
)
lapply(split(iris, iris$Species == "virginica"), function(x) colMeans(x, c("Sepal.Length"), rm.na = TRUE))
lapply(split(iris, iris$Species == "virginica"), function(x) colMeans(x, c("Sepal.Length")))
lapply(split(iris, iris$Species == "virginica"), function(x) colMeans(x[, c("Sepal.Length")]), rn.na = TRUE)
lapply(split(iris, iris$Species == "virginica"), function(x) colMeans(x[, c("Sepal.Length")]), rm.na = TRUE)
lapply(split(iris, iris$Species == "virginica"), function(x) colMeans(x[, c("Sepal.Length")], rm.na = TRUE)
)
lapply(split(iris, iris$Species == "virginica"), function(x) colMeans(x[, c("Sepal.Length")], rm.na = TRUE))
?colMeans
lapply(split(iris, iris$Species == "virginica"), function(x) colMeans(x[, c("Sepal.Length")], na.rm = TRUE))
lapply(split(iris, iris$Species == "virginica"), function(x) colMeans(x, na.rm = TRUE))
lapply(split(iris, iris$Species == "virginica"), function(x) colMeans(x[, c("Sepal.Length", "Sepal.Width")], na.rm = TRUE))
s <- split(iris, iris$Species == "virginica")
s
lapply(s, function(x) colMeans(x[, c("Sepal.Length", "Sepal.Width")], na.rm = TRUE))
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
rowMeans(iris[, 1:4])
rowMeans(iris[, 1])
rowMeans(iris[, 1:2])
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
data(mtcars)
mtcars
mean(mtcars$mpg, mtcars$cyl)
?mean
apply(mtcars, 2, mean)
?tapply
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
x <- tapply(mtcars$mpg, mtcars$cyl, mean)
x
x[1, 1] - x[1, 3]
x[1] - x[3]
abs(x[1] - x[3])
View(mtcars)
x <- tapply(mtcars$hp, mtcars$cyl, mean)
abs(x[1] - x[3])
x[1] - x[3]
debug(ls)
ls(x)
swirl()
library(swirl)
swirl
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y >0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect[bar]
vect["bar"]
vect[c("foo", "bar")]
exit()
## Getting and Cleaning Data
## This will take the URL provided in the assignment and download the zip file.
## It then loads and merges the two datasets, Train and Test into one dataset
## URL of the dataset
sourceDataURL <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip'
## File names for test data, train data and labels
fileList <- c('UCI HAR Dataset/test/subject_test.txt')
fileList <- append(fileList, c('UCI HAR Dataset/test/X_test.txt'))
fileList <- append(fileList, c('UCI HAR Dataset/test/y_test.txt'))
fileList <- append(fileList, c('UCI HAR Dataset/train/subject_train.txt'))
fileList <- append(fileList, c('UCI HAR Dataset/train/X_train.txt'))
fileList <- append(fileList, c('UCI HAR Dataset/train/y_train.txt'))
fileList <- append(fileList, c('UCI HAR Dataset/activity_labels.txt'))
fileList <- append(fileList, c('UCI HAR Dataset/features.txt'))
## Temporary File for storing the downloaded zip then extract the files we want into R
temp <- tempfile()
download.file(sourceDataURL, temp, method = "libcurl")
test.subjects   <- read.table(unz(temp, fileList[1]))
test.x          <- read.table(unz(temp, fileList[2]))
test.y          <- read.table(unz(temp, fileList[3]))
train.subjects  <- read.table(unz(temp, fileList[4]))
train.x         <- read.table(unz(temp, fileList[5]))
train.y         <- read.table(unz(temp, fileList[6]))
activities      <- read.table(unz(temp, fileList[7]))
features        <- read.table(unz(temp, fileList[8]))
unlink(temp)
## Merge testSubjects and trainSubjects into one vector, give descriptive column name
subjects              <- rbind(test.subjects, train.subjects)
subjects.x            <- rbind(test.x, train.x)
subjects.y            <- rbind(test.y, train.y)
## Rename Columns in subjects, subjects.x, subjects.y and activities
colnames(subjects)    <- 'Subject'
colnames(subjects.y)  <- 'ActivityID'
colnames(subjects.x)  <- features[, 2]
colnames(activities)  <- c('ActivityID', 'Activity')
## Loop through columns in features and keep only the columns we want
## Rename columns based on features.txt column names
mean.cols             <- grep('mean\\(\\)', colnames(subjects.x), ignore.case = TRUE)
std.cols              <- grep('Std\\(\\)', colnames(subjects.x), ignore.case = TRUE)
mean.std.cols         <- c(mean.cols, std.cols)
mean.cols
std.cols
mean.std.cols
new.trim.subjects.x   <- subjects.x[, mean.std.cols]
colnames(subjects.x)[mean.std.cols]
colnames(new.trim.subjects.x) <- colnames(subjects.x)[mean.std.cols]
x <- 1
y <- 1
trim.subjects.x <- data.frame(rep(NA, length(subjects.x[, 1])))
for (i in features[, 2])
{
if (   length(grep('mean\\(\\)', i, ignore.case = TRUE) > 0)
|| length(grep('std\\(\\)', i, ignore.case = TRUE) > 0)
)
{
trim.subjects.x[y] <- subjects.x[, x]
colnames(trim.subjects.x)[y] <- colnames(subjects.x)[x]
y <- y + 1
}
x <- x + 1
}
View(trim.subjects.x)
View(new.trim.subjects.x)
identical(trim.subjects.x, new.trim.subjects.x)
x <- 1
y <- 1
trim.subjects.x <- data.frame(rep(NA, length(subjects.x[, 1])))
for (i in features[, 2])
{
if (   length(grep('mean\\(\\)', i, ignore.case = TRUE) > 0)
)
{
trim.subjects.x[y] <- subjects.x[, x]
colnames(trim.subjects.x)[y] <- colnames(subjects.x)[x]
y <- y + 1
}
x <- x + 1
}
x <- 1
y <- 1
trim.subjects.x <- data.frame(rep(NA, length(subjects.x[, 1])))
for (i in features[, 2])
{
if (length(grep('std\\(\\)', i, ignore.case = TRUE) > 0)
)
{
trim.subjects.x[y] <- subjects.x[, x]
colnames(trim.subjects.x)[y] <- colnames(subjects.x)[x]
y <- y + 1
}
x <- x + 1
}
identical(trim.subjects.x, new.trim.subjects.x)
x <- 1
y <- 1
trim.subjects.x <- data.frame(rep(NA, length(subjects.x[, 1])))
for (i in features[, 2])
{
if (   length(grep('mean\\(\\)', i, ignore.case = TRUE) > 0)
)
{
trim.subjects.x[y] <- subjects.x[, x]
colnames(trim.subjects.x)[y] <- colnames(subjects.x)[x]
y <- y + 1
}
x <- x + 1
}
x <- 1
y <- 1
for (i in features[, 2])
{
if (length(grep('std\\(\\)', i, ignore.case = TRUE) > 0)
)
{
trim.subjects.x[y] <- subjects.x[, x]
colnames(trim.subjects.x)[y] <- colnames(subjects.x)[x]
y <- y + 1
}
x <- x + 1
}
identical(trim.subjects.x, new.trim.subjects.x)
len(trim.subjects.x) + 1
length(trim.subjects.x) + 1
x <- 1
y <- 1
trim.subjects.x <- data.frame(rep(NA, length(subjects.x[, 1])))
for (i in features[, 2])
{
if (   length(grep('mean\\(\\)', i, ignore.case = TRUE) > 0)
)
{
trim.subjects.x[y] <- subjects.x[, x]
colnames(trim.subjects.x)[y] <- colnames(subjects.x)[x]
y <- y + 1
}
x <- x + 1
}
x <- 1
y <- length(trim.subjects.x) + 1
for (i in features[, 2])
{
if (length(grep('std\\(\\)', i, ignore.case = TRUE) > 0)
)
{
trim.subjects.x[y] <- subjects.x[, x]
colnames(trim.subjects.x)[y] <- colnames(subjects.x)[x]
y <- y + 1
}
x <- x + 1
}
identical(trim.subjects.x, new.trim.subjects.x)
## Merge subjects.y and activities by ActivityID, make sure to not sort the data
## or we will have the wrong activities with the wrong subjects!!!
## To do this we add an id column temporarily
subjects.y$id         <- 1:nrow(subjects.y)
tidy.subjects.y       <- merge(subjects.y, activities, by = 'ActivityID', sort = FALSE)
tidy.subjects.y       <- tidy.subjects.y[order(tidy.subjects.y$id), ]
tidy.subjects.y       <- data.frame(tidy.subjects.y[, 3])
colnames(tidy.subjects.y)[1] <- 'Activity'
## Make one big data frame
subjects.full         <- cbind(subjects, tidy.subjects.y, trim.subjects.x)
## Get the average of each datapoint for each subject and activity pair
grouping              <- list(
Subject = subjects.full$Subject
,Activity = subjects.full$Activity
)
tidy.full             <- aggregate(subjects.full[, 3:68], grouping, mean, na.rm = TRUE)
## Give tidy column names
for (i in 3:68)
{
colnames(tidy.full)[i] <- paste("Average by Subject and Activity ", colnames(tidy.full)[i])
}
trim.subjects.x   <- subjects.x[, mean.std.cols]
## Name columns based on their column names from subjects.x
colnames(trim.subjects.x) <- colnames(subjects.x)[mean.std.cols]
## Merge subjects.y and activities by ActivityID, make sure to not sort the data
## or we will have the wrong activities with the wrong subjects!!!
## To do this we add an id column temporarily
subjects.y$id         <- 1:nrow(subjects.y)
tidy.subjects.y       <- merge(subjects.y, activities, by = 'ActivityID', sort = FALSE)
tidy.subjects.y       <- tidy.subjects.y[order(tidy.subjects.y$id), ]
tidy.subjects.y       <- data.frame(tidy.subjects.y[, 3])
colnames(tidy.subjects.y)[1] <- 'Activity'
## Make one big data frame
subjects.full         <- cbind(subjects, tidy.subjects.y, trim.subjects.x)
## Get the average of each datapoint for each subject and activity pair
grouping              <- list(
Subject = subjects.full$Subject
,Activity = subjects.full$Activity
)
new.tidy.full             <- aggregate(subjects.full[, 3:68], grouping, mean, na.rm = TRUE)
## Give tidy column names
for (i in 3:68)
{
colnames(new.tidy.full)[i] <- paste("Average by Subject and Activity ", colnames(new.tidy.full)[i])
}
identical(new.tidy.full, tidy.full)
new.tidy.full
View(tidy.full)
View(new.tidy.full)
old.column.names      <- colnames(tidy.full)[-c('Activity', 'Subject')]
old.column.names      <- colnames(tidy.full)[,-c('Activity', 'Subject')]
old.column.names      <- colnames(tidy.full)[c('-Activity', '-Subject')]
old.column.names
old.column.names      <- colnames(tidy.full)[]
old.column.names
old.column.names      <- colnames(tidy.full)tidy.full[c('-Activity', '-Subject')]
colnames(tidy.full)
?colnames
colnames(subjects.x)[mean.std.cols]
colnames(subjects.x, prefix = 'TEST')[mean.std.cols]
colnames(tidy.full)[]
colnames(tidy.full)
colnames(tidy.full)[-68]
colnames(tidy.full)[3:length(colnames(tidy.full))
]
old.column.names      <- colnames(tidy.full)[3:length(colnames(tidy.full))]
old.column.names
paste(rep('Average by Subject and Activity', length(old.column.names)), old.column.names)
## Getting and Cleaning Data
## This will take the URL provided in the assignment and download the zip file.
## It then loads and merges the two datasets, Train and Test into one dataset
## URL of the dataset
sourceDataURL <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip'
## File names for test data, train data and labels
fileList <- c('UCI HAR Dataset/test/subject_test.txt')
fileList <- append(fileList, c('UCI HAR Dataset/test/X_test.txt'))
fileList <- append(fileList, c('UCI HAR Dataset/test/y_test.txt'))
fileList <- append(fileList, c('UCI HAR Dataset/train/subject_train.txt'))
fileList <- append(fileList, c('UCI HAR Dataset/train/X_train.txt'))
fileList <- append(fileList, c('UCI HAR Dataset/train/y_train.txt'))
fileList <- append(fileList, c('UCI HAR Dataset/activity_labels.txt'))
fileList <- append(fileList, c('UCI HAR Dataset/features.txt'))
## Temporary File for storing the downloaded zip then extract the files we want into R
temp <- tempfile()
download.file(sourceDataURL, temp, method = "libcurl")
test.subjects   <- read.table(unz(temp, fileList[1]))
test.x          <- read.table(unz(temp, fileList[2]))
test.y          <- read.table(unz(temp, fileList[3]))
train.subjects  <- read.table(unz(temp, fileList[4]))
train.x         <- read.table(unz(temp, fileList[5]))
train.y         <- read.table(unz(temp, fileList[6]))
activities      <- read.table(unz(temp, fileList[7]))
features        <- read.table(unz(temp, fileList[8]))
unlink(temp)
## Merge testSubjects and trainSubjects into one vector, give descriptive column name
subjects              <- rbind(test.subjects, train.subjects)
subjects.x            <- rbind(test.x, train.x)
subjects.y            <- rbind(test.y, train.y)
## Rename Columns in subjects, subjects.x, subjects.y and activities
colnames(subjects)    <- 'Subject'
colnames(subjects.y)  <- 'ActivityID'
colnames(subjects.x)  <- features[, 2]
colnames(activities)  <- c('ActivityID', 'Activity')
## Get the columns with mean() or std() in their name and make one vector of them
mean.cols             <- grep('mean\\(\\)', colnames(subjects.x), ignore.case = TRUE)
std.cols              <- grep('Std\\(\\)', colnames(subjects.x), ignore.case = TRUE)
mean.std.cols         <- c(mean.cols, std.cols)
## Subset the data with the mean.std.cols vector
trim.subjects.x   <- subjects.x[, mean.std.cols]
## Name columns based on their column names from subjects.x
colnames(trim.subjects.x) <- colnames(subjects.x)[mean.std.cols]
## Merge subjects.y and activities by ActivityID, make sure to not sort the data
## or we will have the wrong activities with the wrong subjects!!!
## To do this we add an id column temporarily
subjects.y$id         <- 1:nrow(subjects.y)
tidy.subjects.y       <- merge(subjects.y, activities, by = 'ActivityID', sort = FALSE)
tidy.subjects.y       <- tidy.subjects.y[order(tidy.subjects.y$id), ]
tidy.subjects.y       <- data.frame(tidy.subjects.y[, 3])
colnames(tidy.subjects.y)[1] <- 'Activity'
## Make one big data frame
subjects.full         <- cbind(subjects, tidy.subjects.y, trim.subjects.x)
## Get the average of each datapoint for each subject and activity pair
grouping              <- list(
Subject = subjects.full$Subject
,Activity = subjects.full$Activity
)
column.count          <- length(colnames(tidy.full))
tidy.full             <- aggregate(subjects.full[, 3:column.count], grouping, mean, na.rm = TRUE)
## Give tidy column names
old.column.names      <- colnames(tidy.full)[3:length(colnames(tidy.full))]
prefix.name           <- 'Average by Subject and Activity'
new.column.names      <- paste(rep(prefix.name, length(old.column.names)), old.column.names)
colnames(tidy.full)[3:column.count] <- new.column.names
## Getting and Cleaning Data
## This will take the URL provided in the assignment and download the zip file.
## It then loads and merges the two datasets, Train and Test into one dataset
## URL of the dataset
sourceDataURL <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip'
## File names for test data, train data and labels
fileList <- c('UCI HAR Dataset/test/subject_test.txt')
fileList <- append(fileList, c('UCI HAR Dataset/test/X_test.txt'))
fileList <- append(fileList, c('UCI HAR Dataset/test/y_test.txt'))
fileList <- append(fileList, c('UCI HAR Dataset/train/subject_train.txt'))
fileList <- append(fileList, c('UCI HAR Dataset/train/X_train.txt'))
fileList <- append(fileList, c('UCI HAR Dataset/train/y_train.txt'))
fileList <- append(fileList, c('UCI HAR Dataset/activity_labels.txt'))
fileList <- append(fileList, c('UCI HAR Dataset/features.txt'))
## Temporary File for storing the downloaded zip then extract the files we want into R
temp <- tempfile()
download.file(sourceDataURL, temp, method = "libcurl")
test.subjects   <- read.table(unz(temp, fileList[1]))
test.x          <- read.table(unz(temp, fileList[2]))
test.y          <- read.table(unz(temp, fileList[3]))
train.subjects  <- read.table(unz(temp, fileList[4]))
train.x         <- read.table(unz(temp, fileList[5]))
train.y         <- read.table(unz(temp, fileList[6]))
activities      <- read.table(unz(temp, fileList[7]))
features        <- read.table(unz(temp, fileList[8]))
unlink(temp)
## Merge testSubjects and trainSubjects into one vector, give descriptive column name
subjects              <- rbind(test.subjects, train.subjects)
subjects.x            <- rbind(test.x, train.x)
subjects.y            <- rbind(test.y, train.y)
## Rename Columns in subjects, subjects.x, subjects.y and activities
colnames(subjects)    <- 'Subject'
colnames(subjects.y)  <- 'ActivityID'
colnames(subjects.x)  <- features[, 2]
colnames(activities)  <- c('ActivityID', 'Activity')
## Get the columns with mean() or std() in their name and make one vector of them
mean.cols             <- grep('mean\\(\\)', colnames(subjects.x), ignore.case = TRUE)
std.cols              <- grep('Std\\(\\)', colnames(subjects.x), ignore.case = TRUE)
mean.std.cols         <- c(mean.cols, std.cols)
## Subset the data with the mean.std.cols vector
trim.subjects.x   <- subjects.x[, mean.std.cols]
## Name columns based on their column names from subjects.x
colnames(trim.subjects.x) <- colnames(subjects.x)[mean.std.cols]
## Merge subjects.y and activities by ActivityID, make sure to not sort the data
## or we will have the wrong activities with the wrong subjects!!!
## To do this we add an id column temporarily
subjects.y$id         <- 1:nrow(subjects.y)
tidy.subjects.y       <- merge(subjects.y, activities, by = 'ActivityID', sort = FALSE)
tidy.subjects.y       <- tidy.subjects.y[order(tidy.subjects.y$id), ]
tidy.subjects.y       <- data.frame(tidy.subjects.y[, 3])
colnames(tidy.subjects.y)[1] <- 'Activity'
## Make one big data frame
subjects.full         <- cbind(subjects, tidy.subjects.y, trim.subjects.x)
## Get the average of each datapoint for each subject and activity pair
grouping              <- list(
Subject = subjects.full$Subject
,Activity = subjects.full$Activity
)
column.count          <- length(colnames(subjects.full))
tidy.full             <- aggregate(subjects.full[, 3:column.count], grouping, mean, na.rm = TRUE)
## Give tidy column names
old.column.names      <- colnames(tidy.full)[3:length(colnames(tidy.full))]
prefix.name           <- 'Average by Subject and Activity'
new.column.names      <- paste(rep(prefix.name, length(old.column.names)), old.column.names)
colnames(tidy.full)[3:column.count] <- new.column.names
View(tidy.full)
## Getting and Cleaning Data
## This will take the URL provided in the assignment and download the zip file.
## It then loads and merges the two datasets, Train and Test into one dataset
## URL of the dataset
sourceDataURL <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip'
## File names for test data, train data and labels
fileList <- c('UCI HAR Dataset/test/subject_test.txt')
fileList <- append(fileList, c('UCI HAR Dataset/test/X_test.txt'))
fileList <- append(fileList, c('UCI HAR Dataset/test/y_test.txt'))
fileList <- append(fileList, c('UCI HAR Dataset/train/subject_train.txt'))
fileList <- append(fileList, c('UCI HAR Dataset/train/X_train.txt'))
fileList <- append(fileList, c('UCI HAR Dataset/train/y_train.txt'))
fileList <- append(fileList, c('UCI HAR Dataset/activity_labels.txt'))
fileList <- append(fileList, c('UCI HAR Dataset/features.txt'))
## Temporary File for storing the downloaded zip then extract the files we want into R
temp <- tempfile()
download.file(sourceDataURL, temp, method = "libcurl")
test.subjects   <- read.table(unz(temp, fileList[1]))
test.x          <- read.table(unz(temp, fileList[2]))
test.y          <- read.table(unz(temp, fileList[3]))
train.subjects  <- read.table(unz(temp, fileList[4]))
train.x         <- read.table(unz(temp, fileList[5]))
train.y         <- read.table(unz(temp, fileList[6]))
activities      <- read.table(unz(temp, fileList[7]))
features        <- read.table(unz(temp, fileList[8]))
unlink(temp)
## Merge testSubjects and trainSubjects into one vector, give descriptive column name
subjects              <- rbind(test.subjects, train.subjects)
subjects.x            <- rbind(test.x, train.x)
subjects.y            <- rbind(test.y, train.y)
## Rename Columns in subjects, subjects.x, subjects.y and activities
colnames(subjects)    <- 'Subject'
colnames(subjects.y)  <- 'ActivityID'
colnames(subjects.x)  <- features[, 2]
colnames(activities)  <- c('ActivityID', 'Activity')
## Get the columns with mean() or std() in their name and make one vector of them
mean.cols             <- grep('mean\\(\\)', colnames(subjects.x), ignore.case = TRUE)
std.cols              <- grep('Std\\(\\)', colnames(subjects.x), ignore.case = TRUE)
mean.std.cols         <- c(mean.cols, std.cols)
## Subset the data with the mean.std.cols vector
trim.subjects.x   <- subjects.x[, mean.std.cols]
## Name columns based on their column names from subjects.x
colnames(trim.subjects.x) <- colnames(subjects.x)[mean.std.cols]
## Merge subjects.y and activities by ActivityID, make sure to not sort the data
## or we will have the wrong activities with the wrong subjects!!!
## To do this we add an id column temporarily
subjects.y$id         <- 1:nrow(subjects.y)
tidy.subjects.y       <- merge(subjects.y, activities, by = 'ActivityID', sort = FALSE)
tidy.subjects.y       <- tidy.subjects.y[order(tidy.subjects.y$id), ]
tidy.subjects.y       <- data.frame(tidy.subjects.y[, 3])
colnames(tidy.subjects.y)[1] <- 'Activity'
## Make one big data frame
subjects.full         <- cbind(subjects, tidy.subjects.y, trim.subjects.x)
## Get the average of each datapoint for each subject and activity pair
grouping              <- list(
Subject = subjects.full$Subject
,Activity = subjects.full$Activity
)
column.count          <- length(colnames(subjects.full))
tidy.full             <- aggregate(subjects.full[, 3:column.count], grouping, mean, na.rm = TRUE)
## Give tidy column names
old.column.names      <- colnames(tidy.full)[3:length(colnames(tidy.full))]
prefix.name           <- 'Average by Subject and Activity'
new.column.names      <- paste(rep(prefix.name, length(old.column.names)), old.column.names)
colnames(tidy.full)[3:column.count] <- new.column.names
getwd()
write.table('tidydata.txt', row.name = FALSE)
View(tidy.full)
write.table(tidy.full, 'tidydata.txt', row.name = FALSE)
setwd('Programming/R/Getting and Cleaning Data/CourseProject/GettingAndCleaningData/')
getwd()
test.read <- read.table('tidydata.txt', header = TRUE)
View(test.read)
