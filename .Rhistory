cachemean(test)
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y){
x <<- y
inverse <- NULL
}
get <- function(){
x
}
setinverse <- function(inv){
inverse <<- inv
}
getinverse <- function(){
inverse
}
list( set = set
,get = get
,setinverse = setinverse
,getinverse = getinverse
)
}
mat <- matrix(c(1,0,5,2,1,6,3,4,0),nrow = 3,ncol = 3)
print (mat)
makeCacheMatrix(mat)
matrixx <- makeCacheMatrix(mat)
matrixx
matrixx$get()
matrixx$getinverse()
solve(matrixx)
solve(mat)
solve(matrixx$get())
cacheSolve <- function(x, ...) {
inverse <- x$getinverse()
if(!isnull(m)){
print("Getting Cached Inverted Matrix")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
mat
matrixx
matrixx$get()
matrixx$getinverse()
cachesolve(matrixx)
cacheSolve(matrixx)
cacheSolve <- function(x, ...) {
inverse <- x$getinverse()
if(!is.null(m)){
print("Getting Cached Inverted Matrix")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
cacheSolve <- function(x, ...) {
inverse <- x$getinverse()
if(!is.null(m)){
print("Getting Cached Inverted Matrix")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
cacheSolve(matrixx)
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)){
print("Getting Cached Inverted Matrix")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
m
}
cacheSolve(matrixx)
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)){
print("Getting Cached Inverted Matrix")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
cacheSolve(matrixx)
## These functions can be used to create a matrix and
## store the matrix and its inverse in a "cache"
## This is useful in case the matrix and its inverse
## need to be used multiple times as the cache of the
## inverse negates requiring calculation of the inverse
## on each use and instead uses the pre-computed, "cached"
## copy
## Example usage:
##
##
##
##
## This function will create a cache of the matrix passed into
## the function.  It also contains the code to change the
## cached matrix, calculate the inverse and store the inverse
## of the cached matrix
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y){
x <<- y
inverse <- NULL
}
get <- function(){
x
}
setinverse <- function(inv){
inverse <<- inv
}
getinverse <- function(){
inverse
}
list( set = set
,get = get
,setinverse = setinverse
,getinverse = getinverse
)
}
## This function will return an inverse matrix of the passed
## matrix if a cached version does not exist.  If an inverse
## exists in the cache, this cached version will be returned
## instead of recalculating the inverse
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)){
print("Getting Cached Inverted Matrix")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
mat <- matrix(c(1,0,5,2,1,6,3,4,0),nrow = 3,ncol = 3)
print(mat)
matrixx <- makeCacheMatrix(mat)
matrixx$get()
matrixx$getinverse()
cacheSolve(matrixx)
cacheSolve(matrixx)
cacheSolve(matrixx)
matrixx$getinverse()
matrixx$getinverse()
cacheSolve(matrixx)
cacheSolve(matrixx)
class(matrixx$get())
class(matrixx$getinverse())
mat <- matrix(c(1,0,0,2,0,0,3,0,0),nrow = 3,ncol = 3)
myMat <- matrix(c(1,0,0,2,0,0,3,0,0),nrow = 3,ncol = 3)
myMatTest <- makeCacheMatrix(myMat)
myMatTest <- makeCacheMatrix(myMat)
cacheSolve(myMatTest)
cacheSolve(myMatTest)
myMatTest$get()
myMatTest$getinverse()
solve(myMat)
myMat <- matrix(c(1, 0, 4, 1, 1, 6, -3, 0, 10),nrow = 3,ncol = 3)
myMatTest <- makeCacheMatrix(myMat)
cacheSolve(myMatTest)
myMat <- matrix(c(1, 0, 4, 1, 1, 6, -3, 0, -10),nrow = 3,ncol = 3)
myMatTest <- makeCacheMatrix(myMat)
cacheSolve(myMatTest)
myMat
myMat <- matrix(c(1, 1, -3, 0, 1, 0, 4, 6, -10),nrow = 3,ncol = 3)
myMat
myMatTest <- makeCacheMatrix(myMat)
cacheSolve(myMatTest)
library("swirl")
swirl()
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
bye()
## Getting and Cleaning Data
## This will take the URL provided in the assignment and download the zip file.
## It then loads and merges the two datasets, Train and Test into one dataset
## URL of the dataset
sourceDataURL <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip'
## File names for test data
fileList <- c('test/subject_test.txt', 'test/X_test.txt', 'test/Y_test.txt')
## File names for train data
fileList <- append(fileList, 'train/subject_train.txt', 'train/X_train.txt', 'train/Y_train.txt')
## Temporary File for storing the downloaded zip
temp <- tempfile()
download.file <- (sourceDataURL, temp)
testSubjects <- read.table(unz(temp, fileList[1]))
testSubjects
## Getting and Cleaning Data
## This will take the URL provided in the assignment and download the zip file.
## It then loads and merges the two datasets, Train and Test into one dataset
## URL of the dataset
sourceDataURL <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip'
## File names for test data
fileList <- c('test/subject_test.txt', 'test/X_test.txt', 'test/Y_test.txt')
## File names for train data
fileList <- append(fileList, c('train/subject_train.txt', 'train/X_train.txt', 'train/Y_train.txt'))
## Temporary File for storing the downloaded zip
temp <- tempfile()
download.file <- (sourceDataURL, temp)
testSubjects <- read.table(unz(temp, fileList[1]))
testSubjects
## Getting and Cleaning Data
## This will take the URL provided in the assignment and download the zip file.
## It then loads and merges the two datasets, Train and Test into one dataset
## URL of the dataset
sourceDataURL <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip'
## File names for test data
fileList <- c('test/subject_test.txt', 'test/X_test.txt', 'test/Y_test.txt')
## File names for train data
fileList <- append(fileList, c('train/subject_train.txt', 'train/X_train.txt', 'train/Y_train.txt'))
## Temporary File for storing the downloaded zip
temp <- tempfile()
download.file <- (sourceDataURL, temp, method = "liburl")
testSubjects <- read.table(unz(temp, fileList[1]))
testSubjects
sourceDataURL
close(temp)
sourceDataURL
?download.file
?tempfile
tempfile()
tempfile()
temp
temp <- tempfile()
download.file <- (sourceDataURL, temp, method = "liburl")
temp <- tempfile()
download.file <- (sourceDataURL, temp, method = "liburl")
?download.file
download.file <- (sourceDataURL, temp, method = "libcurl")
getwd()
setwd("Programming/R/Getting and Cleaning Data/CourseProject/GettingAndCleaningData")
getwd()
temp <- tempfile()
download.file(sourceDataURL, temp, method = "libcurl")
testSubjects <- read.table(unz(temp, fileList[1]))
fileList <- c('USI HAR Dataset/test/subject_test.txt', 'USI HAR Dataset/test/X_test.txt', 'USI HAR Dataset/test/Y_test.txt')
testSubjects <- read.table(unz(temp, fileList[1]))
setwd(temp)
temp <- tempfile()
download.file(sourceDataURL, temp, method = "libcurl")
setwd(temp)
getwd()
testSubjects <- read.table(unz(temp, "X_test.txt"))
?unz
help(unzip)
unzip(temp, list=TRUE)
sourceDataURL <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip'
## File names for test data
fileList <- c('USI HAR Dataset/test/subject_test.txt', 'USI HAR Dataset/test/X_test.txt', 'USI HAR Dataset/test/y_test.txt')
## File names for train data
fileList <- append(fileList, c('USI HAR Dataset/train/subject_train.txt', 'USI HAR Dataset/train/X_train.txt', 'USI HAR Dataset/train/y_train.txt'))
## Temporary File for storing the downloaded zip then extract the files we want into R
temp <- tempfile()
download.file(sourceDataURL, temp, method = "libcurl")
fileList[1]
fileList
testSubjects <- read.table(unz(temp, fileList[1]))
unzip(temp, list=TRUE)
unzip(temp,files=TRUE)
unzip(temp,files="UCI HAR DATASET/train/subject_train.txt")
unzip(temp,files="/UCI HAR DATASET/train/subject_train.txt")
unzip(temp,files="/UCI HAR Dataset/train/subject_train.txt")
unzip(temp,files="UCI HAR Dataset/train/subject_train.txt")
## Getting and Cleaning Data
## This will take the URL provided in the assignment and download the zip file.
## It then loads and merges the two datasets, Train and Test into one dataset
## URL of the dataset
sourceDataURL <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip'
## File names for test data
fileList <- c('UCI HAR Dataset/test/subject_test.txt', 'UCI HAR Dataset/test/X_test.txt', 'UCI HAR Dataset/test/y_test.txt')
## File names for train data
fileList <- append(fileList, c('UCI HAR Dataset/train/subject_train.txt', 'UCI HAR Dataset/train/X_train.txt', 'UCI HAR Dataset/train/y_train.txt'))
## Temporary File for storing the downloaded zip then extract the files we want into R
temp <- tempfile()
download.file(sourceDataURL, temp, method = "libcurl")
testSubjects <- read.table(unz(temp, fileList[1]))
testSubjects
## Getting and Cleaning Data
## This will take the URL provided in the assignment and download the zip file.
## It then loads and merges the two datasets, Train and Test into one dataset
## URL of the dataset
sourceDataURL <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip'
## File names for test data
fileList <- c('UCI HAR Dataset/test/subject_test.txt', 'UCI HAR Dataset/test/X_test.txt', 'UCI HAR Dataset/test/y_test.txt')
## File names for train data
fileList <- append(fileList, c('UCI HAR Dataset/train/subject_train.txt', 'UCI HAR Dataset/train/X_train.txt', 'UCI HAR Dataset/train/y_train.txt'))
## Temporary File for storing the downloaded zip then extract the files we want into R
temp <- tempfile()
download.file(sourceDataURL, temp, method = "libcurl")
testSubjects   <- read.table(unz(temp, fileList[1]))
testX          <- read.table(unz(temp, fileList[2]))
testY          <- read.table(unz(temp, fileList[3]))
trainSubjects  <- read.table(unz(temp, fileList[4]))
trainX         <- read.table(unz(temp, fileList[5]))
trainY         <- read.table(unz(temp, fileList[6]))
##testSubjects
close(temp)
unlink(temp)
unlink(temp)
head(testSubjects)
head(trainSubjects)
colnames(testSubjects) <- "Subject"
head(testSubjects)
head(testX)
## Getting and Cleaning Data
## This will take the URL provided in the assignment and download the zip file.
## It then loads and merges the two datasets, Train and Test into one dataset
## URL of the dataset
sourceDataURL <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip'
## File names for test data, train data and labels
fileList <- c('UCI HAR Dataset/test/subject_test.txt', 'UCI HAR Dataset/test/X_test.txt', 'UCI HAR Dataset/test/y_test.txt')
fileList <- append(fileList, c('UCI HAR Dataset/train/subject_train.txt', 'UCI HAR Dataset/train/X_train.txt', 'UCI HAR Dataset/train/y_train.txt'))
fileList <- append(fileList, c('UCI HAR Dataset/activity_labels.txt', 'UCI HAR Dataset/features.txt')
## Temporary File for storing the downloaded zip then extract the files we want into R
temp <- tempfile()
download.file(sourceDataURL, temp, method = "libcurl")
testSubjects   <- read.table(unz(temp, fileList[1]))
testX          <- read.table(unz(temp, fileList[2]))
testY          <- read.table(unz(temp, fileList[3]))
trainSubjects  <- read.table(unz(temp, fileList[4]))
trainX         <- read.table(unz(temp, fileList[5]))
trainY         <- read.table(unz(temp, fileList[6]))
acivities      <- read.table(unz(temp, fileList[7]))
features       <- read.table(unz(temp, fileList[8]))
unlink(temp)
##testSubjects
View(testY)
View(testY)
View(testY)
View(testY)
View(testY)
View(testX)
View(testX)
head(features)
## Getting and Cleaning Data
## This will take the URL provided in the assignment and download the zip file.
## It then loads and merges the two datasets, Train and Test into one dataset
## URL of the dataset
sourceDataURL <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip'
## File names for test data, train data and labels
fileList <- c('UCI HAR Dataset/test/subject_test.txt', 'UCI HAR Dataset/test/X_test.txt', 'UCI HAR Dataset/test/y_test.txt')
fileList <- append(fileList, c('UCI HAR Dataset/train/subject_train.txt', 'UCI HAR Dataset/train/X_train.txt', 'UCI HAR Dataset/train/y_train.txt'))
fileList <- append(fileList, c('UCI HAR Dataset/activity_labels.txt', 'UCI HAR Dataset/features.txt'))
## Temporary File for storing the downloaded zip then extract the files we want into R
temp <- tempfile()
download.file(sourceDataURL, temp, method = "libcurl")
testSubjects   <- read.table(unz(temp, fileList[1]))
testX          <- read.table(unz(temp, fileList[2]))
testY          <- read.table(unz(temp, fileList[3]))
trainSubjects  <- read.table(unz(temp, fileList[4]))
trainX         <- read.table(unz(temp, fileList[5]))
trainY         <- read.table(unz(temp, fileList[6]))
acivities      <- read.table(unz(temp, fileList[7]))
features       <- read.table(unz(temp, fileList[8]))
unlink(temp)
##testSubjects
head(features)
head(testX)
colnames(testX) <- features
head(testX)
?colnames
head(features)
colnames(testX) <- features[,2]
head(testX)
colnames(testX) <- features[, 2]
colnames(trainX) <- features[, 2]
head(testX)
head(trainX)
View(trainX)
View(trainX)
View(testSubjects)
View(testSubjects)
Subjects            <- append(testSubjects, trainSubjects)
colnames(Subjects)  <- "Subject"
head(Subjects)
head(testSubjects)
type(testSubjects)
class(testSubjects)
class(Subjects)
Subjects            <- merge(testSubjects, trainSubjects)
Subjects            <- append(testSubjects, trainSubjects)
colnames(Subjects)  <- "Subject"
head(Subjects)
head(testSubjects)
desc(testSubjects)
testSubjects[,1]
testSubjects[,2]
sub2 <- data.frame(Subjects)
data.frame()
?data.frame
Subjects.as.data.frame()
as.data.frame(Subjects)
length(Subjects)
Subjects
class(Subjects)
class(testX)
class(testSubjects)
class(testSubjects$V1)
Subjects            <- merge(testSubjects, trainSubjects, by = "V1")
head(Subjects)
Subjects            <- merge(testSubjects, trainSubjects)
length(Subjects)
Subjects
Subjects            <- merge(testSubjects, trainSubjects)
rm(Subjects)
Subjects            <- merge(testSubjects, trainSubjects)
Subjects
testSubjects
trainSubjects
rm (Subjects)
cbind(testSubjects, trainSubjects)
cbind.data.frame(testSubjects, trainSubjects)
Subjects <- data.frame(Subject = c(testSubjects, trainSubjects))
length(testSubjects)
testSubjects
trainSubjects
?plyr
library(plyr)
library(dplyr)
install.packages(dplyr)
install.packages("dplyr")
install.packages("dplyr")
library(plyr)
library(dplyr)
head(testX)
select(testX, "angle(Z,gravityMean)")
select(testX, angle(Z,gravityMean))
select(testX)
View(testX)
View(testX)
select(testX)
?select
select(testX, 1)
select(testX, tBodyAcc-mean()-X)
?make.names
Subjects            <- merge(testSubjects, trainSubjects, all.x = TRUE, all.y = TRUE)
head(Subjects)
Subjects
SubjectsX           <- merge(testX, trainX, all.x = TRUE, all.y = TRUE)
Subjectsy           <- merge(testY, trainY, all.x = TRUE, all.y = TRUE)
SubjectsY           <- merge(testY, trainY, all.x = TRUE, all.y = TRUE)
rm (Subjectsy)
head SubjectsY
head (testY)
head(trainY)
SubjectsY           <- merge(testY, trainY, all.x = TRUE, all.y = TRUE)
View(SubjectsY)
View(SubjectsY)
View(Subjects)
Subjects            <- merge(testSubjects, trainSubjects, all.x = TRUE, all.y = TRUE)
rm(Subjects)
Subjects            <- merge(testSubjects, trainSubjects, all.x = TRUE, all.y = TRUE)
View(testX)
rm(SubjectsY)
View(testY)
View(testY)
View(trainY)
View(trainY)
head(trainY)
head(testSubjects)
head(Subjects)
head(testSubjects)
head(trainSubjects)
head(Subjects)
head(testY)
head(trainY)
merge(testY, trainY)
merge(testSubjects, trainSubjects)
merge(testSubjects, trainSubjects, all.x = TRUE)
merge(testSubjects, trainSubjects, all.x = TRUE, all.y = TRUE)
distinct(testSubjects)
distinct(trainSubjects)
SubjectsY <- rbind(testY, trainY)
head(SubjectsY)
Subjects            <- rbind(testSubjects, trainSubjects)
SubjectsX           <- rbind(testX, trainX)
SubjectsY           <- rbind(testY, trainY)
SubjectsFull        <- cbind(Subjects, SubjectsY)
head(SubjectsFull)
colnames(Subjects)  <- "Subject"
SubjectsFull        <- cbind(Subjects, SubjectsY)
head(SubjectsFull)
colnames(Subjects)   <- "Subject"
colnames(SubjectsY)  <- "Activity"
SubjectsFull         <- cbind(Subjects, SubjectsY)
head(SubjectsFull)
SubjectsFull         <- cbind(Subjects, SubjectsY, SubjectsX)
head(SubjectsFull)
